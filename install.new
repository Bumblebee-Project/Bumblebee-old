#!/bin/bash
# Copyright (C) 2011 Bumblebee Project
#
# This file is part of Bumblebee.
#
# Bumblebee is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bumblebee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bumblebee.  If not, see <http://www.gnu.org/licenses/>.

# Check for a file containing the configured variables. If not present, print a
# message and exit.
if [ -f .configure ]; then
    . .configure
else
    echo "Install is not configured, pelase run ./configure"
    echo "script with appropriate variables"
fi

# files installed by the installer, useful for uninstalling
INSTALLED_FILES=()
INSTALLED_DIRS=()

# Creates a directory on the target system
install_dir() {
    local mode=$1
    local target="$2"
    install -d -m$mode "$PREFIX$target"
    INSTALLED_DIRS[${#INSTALLED_DIRS[@]}]="$target"
}

# Copies a file to the target system, using a configured file if needed. This
# configured file can be created in stages/build
install_file() {
    local mode=$1
    local source="$2"
    local target="$3"
    local prefix="$BUILDDIR/install-files"
    [ ! -f "$prefix/$source" ] && prefix=install-files
    if [ -f "$prefix/$source" ]; then
        install -D -m$mode "$prefix/$source" "$PREFIX$target"
        INSTALLED_FILES[${#INSTALLED_FILES[@]}]="$target"
    else
        echo "'$source' did not exist, ignoring"
    fi
}

# Check for the buildfiles stage to exist and source it. If not, exit.
if [ -f stages/buildfiles.new ]; then
    . stages/buildfiles.new
else
    exit 1;
fi

if (( EUID != 0 )); then
    echo "You do not have sufficient privileges to install Bumblebee"
    echo
    if which sudo &>/dev/null; then
        echo "Please run: sudo $0"
    else
        echo "Please run this script as root"
    fi
    echo
    exit 1
fi

# Check for copyfiles stage to exist and run it. If not exit, uninstaller is
# run only if copyfiles succeded (will need a safer aproach)
if [[ -f stages/copyfiles.new && -f stages/createuninstaller.new ]]; then
    . stages/copyfiles.new
    . stages/createuninstaller.new
else
    echo "Installer incomplete."
    exit 1
fi
