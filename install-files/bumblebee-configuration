#!/bin/bash

#
# ----------------------------------------------------------------------------
# "THE BEER-WARE LICENSE" (Revision 42):
# <mj@casalogic.dk> wrote this file. As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return Martin Juhl
# ----------------------------------------------------------------------------
#

#    This file is part of bumblebee.
#
#    bumblebee is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    bumblebee is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with bumblebee.  If not, see <http://www.gnu.org/licenses/>.
#


ROOT_UID=0

if grep -iq fedora /etc/issue; then
	DISTRO=FEDORA
	DEFAULT_FILE=/etc/default/bumblebee
elif grep -iqE 'Ubuntu|Linux Mint|Backtrack 5' /etc/issue; then
	DISTRO=UBUNTU
	DEFAULT_FILE=/etc/default/bumblebee-initial
elif grep -iq OpenSUSE /etc/issue; then
	DISTRO=OPENSUSE
	DEFAULT_FILE=/etc/default/bumblebee
	if [ -n "$SUDO_USER" ] ; then
		HOME=$(grep "$SUDO_USER" /etc/passwd | cut -f6 -d':')
	fi
else
	echo "Cannot handle this distribution."
fi

# Based on http://askubuntu.com/q/30148/6969#30161
if (( EUID != ROOT_UID )) ; then
	echo "You don't have sufficient privileges to run this script."
	echo
	echo "Please run the script with: sudo bumblebee-configuration"
	exit 1
fi

# Determine Arch x86_64 or i686
ARCH=`uname -m`

# Get tools location
LSPCI=`which lspci`
MODPROBE=`which modprobe`

# Get terminal size
LINES=`stty size | cut -f1 -d' '`
COLUMNS=`stty size | cut -f2 -d' '`

# NVIDIABUSID without PCI:
NVIDIABUSIDCUT=`grep BusID /etc/X11/xorg.conf.nvidia | sed -e "s/[ \t]*BusID[ \t]*\"\(.*\)\"/\1/g" |cut -d: -f2,3`

if [ -f "$DEFAULT_FILE" ] ; then
	whiptail --yesno \
		"Bumblebee Configuration.\n\n"\
		"Do you really want to reconfigure bumblebee?" $LINES $COLUMNS || exit 0
else
	# -f to prevent error messages should the file not exist
	rm -f "$DEFAULT_FILE"
fi

if [ -f /tmp/machineinfo ]; then
    rm /tmp/machineinfo
fi

if [ "$DISTRO" == "UBUNTU" ] ; then
	# Before you start with messing with symlinks or removing files, make sure
	# that you know what you are doing. Examine the installation scripts of
	# nvidia-current and libgl1-mesa-glx to get an idea how the alternatives
	# system should be used. If you're using rm or ln in /etc/alternatives, you
	# are doing it wrong.
	# A helpful command for showing links being created on configuring an other
	# alternative:     update-alternatives --display gl_conf

	# Since Bumblebee is a project to get Optimus laptops to work, we can safely
	# assume that the nvidia driver is not used for the default display (:0)
	# Therefore default to mesa instead of nvidia. vglrun sets the GL library
	# path to /usr/lib{,32}/nvidia-current for programs running on the display
	# accelerated by the nvidia card. Since most graphical applications are not
	# statically linked nor setuid/setgid binaries, this is fine. There is an
	# exception on this: programs which overwrite LD_LIBRARY_PATH will fail to
	# load the nvidia GL driver. However, this method will allow GL on the Intel
	# display where the previous situation breaks it.
	# TLDR: this allows the intel display to use GL, the bumblebee display will
	#       load the nvidia driver through vglrun in almost all cases

	# this takes care of setting correct links which is used on
	# /usr/lib/nvidia-current/gl.conf
	# multiarch support
	for arch in x86_64-linux-gnu i386-linux-gnu; do
		# check if the link exist to prevent error messages
		if update-alternatives --list ${arch}_gl_conf >/dev/null 2>&1; then
			update-alternatives --force --set ${arch}_gl_conf /usr/lib/$arch/mesa/ld.so.conf
		fi
	done
	# versions before Oneiric without multiarch
	if update-alternatives --list gl_conf >/dev/null 2>&1; then
		update-alternatives --force --set gl_conf /usr/lib/mesa/ld.so.conf
	fi
	# remove a legacy link which was not used anyway
	rm -rf /etc/alternatives/xorg_extra_modules-bumblebee
	rm -rf /etc/alternatives/_xorg_extra_modules

	# fix appeared in commit 68a75db4df628a910886, it should remove an excess
	# symlink; /usr/lib/xorg/extra-modules ->
	# /etc/alternatives/{_,}xorg_extra_modules -> /usr/lib/nvidia-current/xorg
	rm -f /usr/lib/nvidia-current/xorg/xorg
	# if /etc/alternatives/xorg_extra_modules pointed to extra-modules...
	rm -f /usr/lib/xorg/extra-modules/xorg
	# or even x11-extra-modules
	rm -f /usr/lib/xorg/x11-extra-modules/xorg

	# Refresh the dynamic loader search path so /etc/ld.so.conf.d/GL.conf ->
	# /etc/alternatives/gl_conf -> /usr/lib/mesa/ld.so.conf
	ldconfig
fi

echo
echo "Configuring... Please wait"
echo


#
#	Get current values
#
NVIDIABUSID=`grep BusID /etc/X11/xorg.conf.nvidia | sed -e "s/[ \t]*BusID[ \t]*\"\(.*\)\"/\1/g"`
CONNECTEDMONITOR=`grep ConnectedMonitor /etc/X11/xorg.conf.nvidia | sed -e "s/[ \t]*Option[ \t]*\"ConnectedMonitor\"[ \t]*\"\(.*\)\"/\1/g"`

CONFIGMODE=NONE

if [ `${LSPCI} |grep VGA |wc -l` -eq 2 ]; then
    NVIDIABUSID=`${LSPCI} | grep VGA | grep nVidia | awk '{ print "PCI:"$1 }' | sed s/\\\./:/g`
elif [ `${LSPCI} |grep 3D |wc -l` -eq 1 ]; then
    NVIDIABUSID=`${LSPCI} | grep 3D  | grep nVidia | awk '{ print "PCI:"$1 }' | sed s/\\\./:/g`
else
    whiptail --msgbox \
" The BusID of the nVidia card can't be determined.\n"\
"You must correct this manually in /etc/X11/xorg.conf.nvidia\n"\
"Please report this problem..\n\n"\
"Press Any Key to continue." $LINES $COLUMNS
fi

sed -i "s/\([ \t]*BusID[ \t]*\)\".*\"/\1\"$NVIDIABUSID\"/g" /etc/X11/xorg.conf.nvidia
if [ "$DISTRO" == "OPENSUSE" ] ; then
fi
NVIDIABUSIDCUT=`echo $NVIDIABUSID | cut -d: -f2,3`

if [ "$CONFIGMODE" == "MANUAL" ]; then
	CONNECTEDMONITOR="UNKNOWN"
	if [ "$DISTRO" == "UBUNTU" ] ; then
		${MODPROBE} nvidia-current
		if [ `$LSPCI -v -s $NVIDIABUSIDCUT |grep ! |wc -l` = 0 ] ; then
			query_info=$(LD_LIBRARY_PATH=/usr/lib/nvidia-current /usr/lib/nvidia-current/bin/nvidia-xconfig --query-gpu-info)
			if [ $(grep "Display Devices" <<<"$query_info" | cut -d: -f2) -gt 0 ]; then
				CONNECTEDMONITOR=$(grep "Display Device 0" <<< "$query_info " | cut -d\( -f 2 | cut -d\) -f1)
			fi
		fi
		${MODPROBE} -r nvidia
	fi
	if [ "$DISTRO" == "OPENSUSE" ] ; then
		${MODPROBE} nvidia 2>&1 >/dev/null
		if [ -x /usr/bin/nvidia-xconfig ] ; then
			if [ "`/usr/bin/nvidia-xconfig --query-gpu-info 2>&1 | grep ERROR`" == "" ] ; then
				if [ `/usr/bin/nvidia-xconfig --query-gpu-info | grep "Display Devices" | cut -f2 -d":"` -gt 0 ] ; then
					CONNECTEDMONITOR=`/usr/bin/nvidia-xconfig --query-gpu-info | grep "Display Device 0" | cut -f2 -d\( | cut -f1 -d\)`
				fi
			fi
		fi
		${MODPROBE} -r nvidia 2>&1 >/dev/null
	fi
	if [ "$CONNECTEDMONITOR" != "CRT-0" ] && [ "$CONNECTEDMONITOR" != "DFP-0" ];then
		LIST_SIZE=$(($LINES - 10))
choice=$(whiptail --nocancel --menu \
" The device for the nVidia monitor could not be detected, please\n"\
"manually choose the device, if your having problems, try another." $LINES $COLUMNS $LIST_SIZE 1 "CRT-0" 2 "DFP-0" 3 "Manually Enter" 3>&1 1>&2 2>&3)
		case "$choice" in
		1)
			CONNECTEDMONITOR="CRT-0"
		;;
		2)
			CONNECTEDMONITOR="DFP-0"
		;;
		3)
			CONNECTEDMONITOR=$(whiptail --inputbox " Enter the nVidia connected monitor:" $LINES $COLUMNS 3>&1 1>&2 2>&3)
		;;
		esac
	fi
fi

sed -i "s/\([ \t]*Option[ \t]*\"ConnectedMonitor\"[ \t]*\)".*"/\1\"$CONNECTEDMONITOR\"/g" /etc/X11/xorg.conf.nvidia



if [ "$DISTRO" == "UBUNTU" ] ; then
	chmod +x /usr/local/bin/bumblebee*
	update-rc.d bumblebee defaults
fi


LIST_SIZE=$(($LINES - 10))
choice=$(whiptail --nocancel --menu --default-item 4 \
" The Image Transport is how the images are transferred from the\n"\
"nVidia card to the Intel card, people has different experiences of\n"\
"performance, but just select the default if you are in doubt.\n\n"\
"I recently discovered that yuv and jpeg both has some lagging\n"\
"this is only noticable in fast moving games, such as 1st person\n"\
"shooters and for me, its only good enough with xv, even though\n"\
"xv brings down performance a little." $LINES $COLUMNS $LIST_SIZE 1 "YUV" 2 "JPEG" 3 "PROXY" 4 "XV (Default)" 5 "RGB" 3>&1 1>&2 2>&3)

case "$choice" in
1)
	IMAGETRANSPORT="yuv"
	;;
2)
	IMAGETRANSPORT="jpeg"
	;;
3)
	IMAGETRANSPORT="proxy"
	;;
4)
	IMAGETRANSPORT="xv"
	;;
5)
	IMAGETRANSPORT="rgb"
	;;
*)
	IMAGETRANSPORT="xv"
	;;
esac

sed -i 's/VGL_COMPRESS.*/VGL_COMPRESS='$IMAGETRANSPORT'/' "$DEFAULT_FILE"

#
#	Set userrights
#
if ! grep -q '^bumblebee:' /etc/group; then
	groupadd bumblebee
fi
if [ "$DISTRO" == "UBUNTU" ] && [ -n "$SUDO_USER" ]; then
	gpasswd -a "$SUDO_USER" bumblebee
fi
if [ "$DISTRO" == "OPENSUSE" ] ; then
	if [ "$SUDO_USER" != "" ] ; then
		groupmod -A `env | grep SUDO_USER | cut -f2 -d=` bumblebee
	fi
fi

# Bumblebee creates a file in /etc/sudoers.d, do not do an unnecessary write
if grep -q '^%bumblebee ' /etc/sudoers; then
	sed '/^%bumblebee /d' -i /etc/sudoers
fi

#
#	That's all folks
#
whiptail --msgbox \
" Bumblebee is now configured.\n\n"\
"If you have any problems, please run bumblebee-bugreport\n\n"\
"Have fun...." $LINES $COLUMNS
