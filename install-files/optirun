#!/bin/bash
# Copyright (C) 2011 Bumblebee Project
#
# This file is part of Bumblebee.
#
# Bumblebee is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bumblebee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bumblebee.  If not, see <http://www.gnu.org/licenses/>.

# load common library
BUMBLEBEE_LIBDIR=/usr/lib/bumblebee
. "$BUMBLEBEE_LIBDIR/common-paths"
. "$BUMBLEBEE_LIBDIR/common-functions"

load_settings

show_help_msg() {
    :
}

# only print a message if the user wants to
PRINT_MESSAGE=echo
msg() {
    $PRINT_MESSAGE "$1"
}

while :; do
    case "$1" in
      -f)
        ECO_MODE=0
        msg "The application will be run with Bumblebee even if it's not"
        msg "connected to a power supply (e.g. running on battery)"
        ;; #force optirun if on battery
      -32)
        msg "Ignoring -32 as optirun automatically detects which libraries should be used"
        ;;
      -c)
        shift
        case "$1" in
          jpeg|proxy|rgb|yuv|xv)
            VGL_COMPRESS=$1
            msg "Bumblebee will transfer frames using: $VGL_COMPRESS"
            ;;
          *)
            msg "The frame transfer parameter -c must be followed by jpeg, proxy, rgb, yuv or xv."
            exit 3
            ;;
        esac
        ;;
      -d)
        shift
        if ! [[ $1 =~ "^:[0-9]+$" ]]; then
            VGL_DISPLAY=$1
            msg "Bumblebee will use the $VGL_DISPLAY display for rendering"
        else
            msg "The display parameter -d must be followed by a colon and digits like :8"
            exit 2
        fi
        ;;
      --help)
        show_help_msg
        exit 0
        ;;
      --silent)
        # if $PRINT_MESSAGE is set to : (no-op), no messages will be displayed
        PRINT_MESSAGE=:
        ;;
      --)
        # commonly found in parameters, usage: optirun -- -not -recognised -as -param
        shift
        break
        ;;
      -*)
        msg "Unknown parameter: $1"
        exit 255
        ;;
      *)
        # begin of a command, assuming no optirun parameters after this one
        break
        ;;
    esac
    # move to the next option in the command
    shift
done

if [[ $0 =~ /optirun(32|64)$ ]]; then
    msg "Running ${0##*/} is deprecated as optirun detects automatically"
    msg "whether the 32-bit or 64-bit libraries should be used. Use optirun instead"
fi

msg_shown=false
show_msg() {
    if ! $msg_shown; then
        msg "Another bumblebee powered application is running, keeping bumblebee alive."
        msg_shown=true
    fi
}

# Ensures that the X server can be used. Return values:
# 0 - the X server is available
# 1 - the X server is unavailable
optirun_ready() {
    xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS" > /dev/null
    case $? in
      0) # X is started and available
        return 0
        ;;
      5) # started but not ready
        ;;
      [12]) # Not started yet
        # XXX: a better way to check if the daemon is running
        if [ ! -e "$BUMBLEBEE_FIFO" ]; then
            msg "The Bumblebee daemon has not been started. To start the daemon, run:"
            # XXX: distro-dependant command
            msg "    sudo /etc/init.d/bumblebee start"
            return 1
        fi
        if [ ! -w "$BUMBLEBEE_FIFO" ]; then
            msg "You have no permission to start the Bumblebee X server. Add"
            msg "yourself to the '$BUMBLEBEE_GROUP' group."
            return 1
        fi
        echo start > "$BUMBLEBEE_FIFO"
        ;;
      3) # xserver / driver crash
        return 1
        ;;
      4) # not our X
        return 1
        ;;
    esac
    # Wait for at most 4.5 seconds before X is available since the daemon waits
    # too
    local retries
    for ((retries=9; retries; retries--)); do
        xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS" \
            > /dev/null && return 0
        sleep .5
    done

    # at this point, the timeout for the server to become available has reached
    return 1
}
# Launch an application on the nVidia card
# return values do not make sense since it could come from the app as well
optirun_launcher() {
    if ! optirun_ready; then
        msg "The Bumblebee X server was not available, please check the"
        msg "Bumblebee logfile at $BUMBLEBEE_LOGFILE"
        # If we cannot use the Bumblebee X server, run the program without it
        exec "$@"
        return
    fi
    local VGL_DRIVER="$X_LD_LIBRARY_PATH:$LD_LIBRARY_PATH"
    # export settings from configuration file
    export VGL_LOG
    export VGL_READBACK
    vglrun -c "$VGL_COMPRESS" -d "$VGL_DISPLAY" -ld "$VGL_DRIVER" -- "$@"

    # notify the daemon that we are done
    echo stop > "$BUMBLEBEE_FIFO"
}

RUN=optirun_launcher

# Only check if we're off-line when ecomode is enabled as querying the value
# may introduce a second of delay
if [[ $ECO_MODE == 1 ]]; then
    POWER_STATE=0
    for state in /sys/class/power_supply/*/online; do
        POWER_STATE=$(cat "$state")
        break
    done

    # do not render the program on the nVidia card as we're off-line, exec will
    # replace the current process by the program specified in the arguments
    [ $POWER_STATE -eq 0 ] && RUN=exec
fi

$RUN "$@"

