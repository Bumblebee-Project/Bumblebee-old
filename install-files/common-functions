#!/bin/bash
# Bumblebee functions library
# Make sure that this file has NO side effects. It is intended to be sourced
# and should define some functions and variables. Keep it clean, do not
# unnecessarily leak variables (use locals)

# Machine type, known values: i386, i686 (32-bit), x86_64 (64-bit)
# This value depends on the kernel
ARCH=$(uname -m)

# is the OS 32-bit or 64-bit? Save it to a variable since it's static.
IS_64=false
[[ $ARCH == x86_64 ]] && IS_64=true

# the modprobe binary
MODPROBE="$(which modprobe)"

# Some common configuration files
BUMBLEBEE_CONFDIR=/etc/bumblebee

# We would need some other way to retrieve version number
BUMBLEBEE_VERSION=1.7.10

# retrieve the graphics kernel module to be used for the X server
# Return values:
#   0: a driver is available, the module name is printed
#   1: no driver is available, nothing is printed
get_graphics_driver() {
    local driver
    # currently, it detects which nvidia module can be used. In the future,
    # this function may also use nouveau if it should be used
    for driver in nvidia-current nvidia; do
        if "${MODPROBE}" --dry-run --quiet $driver; then
            echo $driver
            return 0
        fi
    done
    return 1
}

# In the future, {en,dis}able_graphics may handle ACPI calls. Only use
# {,un}load_graphics_driver if the card should not be toggled
enable_graphics() {
    load_graphics_driver
}
disable_graphics() {
    unload_graphics_driver
}

# load the driver, return 1 on failure
load_graphics_driver() {
    "${MODPROBE}" "$(get_graphics_driver)" || return 1
}
# unload the driver, return 1 on failure
unload_graphics_driver() {
    "${MODPROBE}" -r "$(get_graphics_driver)" || return 1
}

# Should detect distro by name in /etc/issue. Prints the result as
# "distro-like". Returns 0 if supported distro 1 otherwise.
detect_distro() {
    local distro
    for distro in fedora ubuntu opensuse debian 'arch linux' gentoo\
        'linux mint' 'backtrack 5'; do
        if grep -iq "$distro" /etc/issue; then
            # remove whitespace
            distro="${distro// }"
            # these are just aliases for ubuntu
            [[ $distro == linuxmint ]] && distro=ubuntu
            [[ $distro == backtrack5 ]] && distro=ubuntu
            echo "$distro"
            return 0
        fi
    done
	return 1
}

# Check if the X server is available based on a pidfile, daemon and args.
# If available, the PID of Bumblebee's X server is printed and the return value
# is 0. Other values indicates that the Bumblebee X server is not available:
# 1 - the X server has not been started
# 2 - the pidfile exists, but is not valid and should be removed
# 3 - Xorg was previously crashed by nvidia, reboot required
# 4 - a X server has been detected, but it's not Bumblebee's one
xserver_available() {
    local pidfile x_daemon x_daemon_args pid cmd
    pidfile="$1"
    x_daemon="$2"
    x_daemon_args="$3"
    if [ ! -L "$pidfile" -a ! -e "$pidfile" ]; then
        # the pidfile does not exist
        return 1
    fi
    if [ -L "$pidfile" -o ! -f "$pidfile" ] ||
        ! [ "$(stat -c '%u' "$pidfile")" = "0" ]; then
        # the pidfile is a symlink, not a regular file or not owned by root
        return 2
    fi
    # read the first line from the pidfile, ignoring whitespace
    read pid < "$pidfile"
    if [ -z "$pid" ] ||
        ! [ "$pid" -gt 0 -o "$pid" -le 0 ] 2>/dev/null; then
        # empty pidfile or non-numeric pid (non-numeric values never fulfil
        # n > 0 && n <= 0)
        return 2
    fi
    if kill -0 "$pid"; then
        # process does not exist or not allowed to send signal
        return 2
    fi

    cmd="$(ps --format command --no-headers -ww --pid $pid)"

    if [[ $cmd == '[Xorg]' ]]; then
        # crashed xorg and / or graphics driver
        return 3
    fi

    # dirty: it justs checks the leading part, the display part is ignored
    if [[ $cmd =~ ^"$x_daemon $x_daemon_args" ]]; then
        echo "$pid"
        return 0
    fi

    # it's another X instance
    if [[ $cmd =~ ^"$x_daemon" ]]; then
        # not a bumblebee X server
        return 4
    fi

    # not a X server at all
    return 2
}

