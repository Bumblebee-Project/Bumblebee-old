#!/bin/bash
# This file is part of Bumblebee.
#
# Bumblebee is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bumblebee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bumblebee.  If not, see <http://www.gnu.org/licenses/>.

# Bumblebee functions library
# Make sure that this file has NO side effects. It is intended to be sourced
# and should define some functions and variables. Keep it clean, do not
# unnecessarily leak variables (use locals)

# Machine type, known values: i386, i686 (32-bit), x86_64 (64-bit)
# This value depends on the kernel
ARCH=$(uname -m)

# is the OS 32-bit or 64-bit? Save it to a variable since it's static.
IS_64=false
[[ $ARCH == x86_64 ]] && IS_64=true

# the modprobe binary
MODPROBE="$(which modprobe)"

# We would need some other way to retrieve version number
BUMBLEBEE_VERSION=1.7.10

# retrieve the graphics kernel module to be used for the X server
# Return values:
#   0: a driver is available, the module name is printed
#   1: no driver is available, nothing is printed
get_graphics_driver() {
    local driver
    # currently, it detects which nvidia module can be used. In the future,
    # this function may also use nouveau if it should be used
    for driver in nvidia-current nvidia; do
        if "${MODPROBE}" --dry-run --quiet $driver; then
            echo $driver
            return 0
        fi
    done
    return 1
}

# Displays any conflicting drivers that must be unloaded before $driver can be
# loaded. The first argument is $driver
get_conflicting_drivers() {
    local driver="$1"
    case "$driver" in
      nvidia)
        echo "nouveau"
        ;;
      nouveau)
        echo "nvidia"
        ;;
    esac
}

# In the future, {en,dis}able_graphics may handle ACPI calls. Only use
# {,un}load_graphics_driver if the card should not be toggled
enable_graphics() {
    load_graphics_driver
}
disable_graphics() {
    unload_graphics_driver
}

# load the driver, return 1 on failure
load_graphics_driver() {
    local remove_driver
    local driver="$(get_graphics_driver)"
    if ! lsmod | grep -q "^$driver "; then
        for remove_driver in $(get_conflicting_drivers "$driver"); do
            # unload conflicting drivers if loaded, ignore failure
            if lsmod | grep -q "^$remove_driver "; then
                "${MODPROBE}" -r "$remove_driver"
            fi
        done
      "${MODPROBE}" "$driver" || return 1
    fi
    return 0
}
# unload the driver, return 1 on failure. If the driver was already loaded, no
# action is performed
unload_graphics_driver() {
    local driver="$(get_graphics_driver)"
    if lsmod | grep -q "^$driver "; then
      "${MODPROBE}" -r "$driver" || return 1
    fi
    return 0
}

# Should detect distro by name in /etc/issue. Prints the result as
# "distro-like". Returns 0 if supported distro 1 otherwise.
detect_distro() {
    local distro
    for distro in fedora ubuntu opensuse debian 'arch linux' gentoo\
        'linux mint' 'backtrack 5'; do
        if grep -iq "$distro" /etc/issue; then
            # remove whitespace
            distro="${distro// }"
            # these are just aliases for ubuntu
            [[ $distro == linuxmint ]] && distro=ubuntu
            [[ $distro == backtrack5 ]] && distro=ubuntu
            echo "$distro"
            return 0
        fi
    done
    return 1
}

# Check if the X server is available based on a pidfile, daemon and args.
# If available, the PID of Bumblebee's X server is printed and the return value
# is 0. Other values indicates that the Bumblebee X server is not available:
# 1 - the X server has not been started
# 2 - the pidfile exists, but is not valid and should be removed
# 3 - Xorg was previously crashed by nvidia, reboot required
# 4 - a X server has been detected, but it's not Bumblebee's one
xserver_available() {
    local pidfile x_daemon x_daemon_args pid cmd
    pidfile="$1"
    x_daemon="$2"
    x_daemon_args="$3"
    if [ ! -L "$pidfile" -a ! -e "$pidfile" ]; then
        # the pidfile does not exist
        return 1
    fi
    if [ -L "$pidfile" -o ! -f "$pidfile" ] ||
        ! [ "$(stat -c '%u' "$pidfile")" = "0" ]; then
        # the pidfile is a symlink, not a regular file or not owned by root
        return 2
    fi
    # read the first line from the pidfile, ignoring whitespace
    read pid < "$pidfile"
    if [ -z "$pid" ] ||
        ! [ "$pid" -gt 0 -o "$pid" -le 0 ] 2>/dev/null; then
        # empty pidfile or non-numeric pid (non-numeric values never fulfil
        # n > 0 && n <= 0)
        return 2
    fi
    if ! ps --pid "$pid" &>/dev/null; then
        # process does not exist
        return 2
    fi

    cmd="$(ps --format command --no-headers -ww --pid $pid)"

    if [[ $cmd == '[Xorg]' ]]; then
        # crashed xorg and / or graphics driver
        return 3
    fi

    # dirty: it justs checks the leading part, the display part is ignored
    if [[ $cmd == "$x_daemon $x_daemon_args"* ]]; then
        echo "$pid"
        return 0
    fi

    # it's another X instance
    if [[ $cmd == "$x_daemon"* ]]; then
        # not a bumblebee X server
        return 4
    fi

    # not a X server at all
    return 2
}

# sets the graphics driver for the script and load related settings
set_graphics_driver() {
    DRIVER="$1"

    # The library path in which the X server can find libraries like GL
    X_LD_LIBRARY_PATH=
    X_LD_LIB32_PATH=
    X_LD_LIB64_PATH=

    # allow to set X_LD_LIBRARY_PATH if needed
    if [ -s "${BUMBLEBEE_LIBDIR}/drivers/${DRIVER}.options" ]; then
        . "${BUMBLEBEE_LIBDIR}/drivers/${DRIVER}.options"
        if $IS_64; then
            [ -n "$X_LD_LIB64_PATH" ] && X_LD_LIBRARY_PATH="$X_LD_LIB64_PATH"
        else
            [ -n "$X_LD_LIB32_PATH" ] && X_LD_LIBRARY_PATH="$X_LD_LIB32_PATH"
        fi
    fi
}

# load the settings and sets some other variables
load_settings() {
    # defaults
    STOP_SERVICE_ON_EXIT=y
    VGL_DISPLAY=:8
    VGL_COMPRESS=proxy
    VGL_READBACK=pbo
    ECO_MODE=0
    DRIVER=nvidia
    X_CONFFILE=
    BUMBLEBEE_GROUP=bumblebee
    BUMBLEBEE_LOGFILE=/var/log/bumblebee.log
    . "$BUMBLEBEE_CONFDIR/bumblebee.conf"

    # allow the user to specify a custom xorg path, otherwise base on driver
    [ -z "$X_CONFFILE" ] && X_CONFFILE="$BUMBLEBEE_CONFDIR/xorg.conf.${DRIVER}"

    # -config file   use a certain xorg.conf so the nvidia drivers can be used
    # -sharevts      without this option, the current VTY running X becomes
    #                blank while the Bumblebee X server is running
    # -nolisten tcp  do not use start a TCP server listening for connections
    # -noreset       do not logout after the last program closes
    X_DAEMON_ARGS="-config $X_CONFFILE -sharevts -nolisten tcp -noreset"

    set_graphics_driver "$DRIVER"

    # Remove colon and everything before it: :1.0 -> 1.0
    DISPLAY_NUMBER=${VGL_DISPLAY##*:}
    # Remove dot and everything after it: 1.0 -> 0
    DISPLAY_NUMBER=${DISPLAY_NUMBER%%.*}
    PIDFILE="/tmp/.X${DISPLAY_NUMBER}-lock"
    X_LOGFILE="/var/log/Xorg.${DISPLAY_NUMBER}.log"

}
