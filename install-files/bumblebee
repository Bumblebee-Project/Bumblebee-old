#!/bin/bash

# load common library
BUMBLEBEE_LIBDIR=/usr/lib/bumblebee
. "$BUMBLEBEE_LIBDIR/common-functions"

# Full paths to possible optirun binaries
OPTIRUNS=()
# Changed to which's. Assumming the PATH variable is correct. Only the 'optirun'
# binary should be looked for. Better use of -32 argument. Maybe drop it 
# completely and always load the 32-bit libraries.
OPTIRUNS[0]=$(which optirun)
OPTIRUNS[1]=$(which optirun32)
OPTIRUNS[2]=$(which optirun64)

# Defaults
BUMBLEBEE_FIFO=/var/run/bumblebee.fifo

X_LD_LIBRARY_PATH=
X_MODULE_PATH="/usr/lib/nvidia-current/xorg,/usr/lib/xorg/modules"
X_DAEMON=/usr/bin/X # better switch to a 'which' statement?
X_CONFIG=/etc/X11/xorg.conf.nvidia # staged for nouveau/nvidia options
X_DAEMON_ARGS="-config $X_CONFIG -sharevts -modulepath $X_MODULE_PATH -nolisten tcp -noreset"

# Load settings
. "$BUMBLEBEE_CONFDIR/bumblebee.conf"

# Remove colon and everything before it: :1.0 -> 1.0
display=${VGL_DISPLAY##*:}
# Remove dot and everything after it: 1.0 -> 0
display=${display%%.*}
PIDFILE="/tmp/.X${display}-lock"
X_LOG="/var/log/Xorg.${display}.log"


# Show the versioning info and Project URL.
show_version_msg() {
    cat <<EOF
Bumblebee version ${BUMBLEBEE_VERSION}

Licenced under GNU GPL v3, "Beer-ware License" and "Red Bull License"
as published by Martin Juhl.

More info at: https://github.com/Bumblebee-Project/Bumblebee
EOF
}

# Show help message on usage and arguments.
show_help_msg() {
    show_version_msg

    cat <<EOF
Usage:
    bumblebee [OPTIONS]
    OPTIONS
        -d          start bumblebee service as daemon. To start it
                    backgrounded use the handler with 'start' argument.
        --help      show this help message
        --version   show version number
EOF
}


# Start Bumblebee's X server running on the nvidia card
# Return values:
# 0 - X server is available
# 1 - X server is not available
start_x() {
    # is a X server running?
    xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS" >/dev/null
    case $? in
      0) # already started
        return 0
        ;;
      1) # not started, see below
        ;;
      2) # ignore pidfile, start X
        rm -rf "$PIDFILE"
        ;;
      3) # driver crash
        log_daemon_msg "Xorg was previously crashed by the nvidia driver on display $VGL_DISPLAY."
        log_daemon_msg "Reboot the machine if you want to use Bumblebee"
        return 1
        ;;
      4) # another X is running
        log_daemon_msg "Display $VGL_DISPLAY is already in use."
        log_daemon_msg "Consider changing \$VGL_DISPLAY in $BUMBLEBEE_CONFDIR/bumblebee.conf"
        return 1
        ;;
    esac

    LD_LIBRARY_PATH="$X_LD_LIBRARY_PATH" \
        "$X_DAEMON" "$X_DAEMON_ARGS $VGL_DISPLAY" &

    # wait for at most three seconds before the server has started
    local retries=0
    # wait until the PIDFILE has become available (X is started)
    while [ ! -s "$PIDFILE" -a $retries -lt 6 ]; do
        ((retries++))
        sleep .5
    done

    # fail if the X server is not running
    if ! xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS"; then
        log_daemon_msg "The Bumblebee X Server failed to start. Please check $X_LOG"
        return 1
    fi

    # Everything is OK, X has started
    return 0
}

# Stop the running X server
stop_x() {
    :
}

start_daemon() {
    if (( EUID != 0 )); then
        echo "Must be run as root"
        return 1
    fi

    # XXX: remove existing file?

    if ! mkfifo --mode=640  "$BUMBLEBEE_FIFO"; then
        log_daemon_msg "Error: Cannot create fifo $BUMBLEBEE_FIFO for communication."
        return 1
    fi

    local command
    local pids
    while :; do
        # this is our "sleep" function, it waits for clients to give commands
        command=$(< "$BUMBLEBEE_FIFO")
        # space-separated list of optirun instances
        pids=$(pidof -x "${OPTIRUNS[@]}")

        if [[ ${command:0:5} == start ]]; then
            # only start if there are actually clients running
            if [ -n "$pids" ]; then
                start_x
            fi
        else
            # allow to quit X if there are no clients running or if the client
            # does not have child programs running. xlsclients did not work :(
            if [ -z "$pids" ] || ! ps --ppid "$pids" > /dev/null; then
                stop_x
            fi
        fi
    done
}

case "$1" in
  --version)
    show_version_msg
    ;;
  --help)
    show_help_msg
    ;;
  -d)
    start_daemon
    ;;
  *)
    show_help_msg
    ;;
esac
