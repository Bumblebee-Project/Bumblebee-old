#!/bin/bash

# load common library
BUMBLEBEE_LIBDIR=/usr/lib/bumblebee
. "$BUMBLEBEE_LIBDIR/common-paths"
. "$BUMBLEBEE_LIBDIR/common-functions"

load_settings

# Log a message to our log file
log_daemon_msg() {
    # should log it to a file
    echo "$1"
}

# Initialize a log file. If present save it to an old one.
init_log() {
    :
}

# Start Bumblebee's X server running on the nvidia card
# Return values:
# 0 - X server is available
# 1 - X server is not available
start_x() {
    # is a X server running?
    xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS" >/dev/null
    case $? in
      0) # already started
        return 0
        ;;
      1) # not started, see below
        ;;
      2) # ignore pidfile, start X
        log_daemon_msg "Pidfile does already exist and will be removed."
        rm -rf "$PIDFILE"
        ;;
      3) # driver crash
        log_daemon_msg "Xorg was previously crashed by the nvidia driver on display $VGL_DISPLAY."
        log_daemon_msg "Reboot the machine if you want to use Bumblebee"
        return 1
        ;;
      4) # another X is running
        log_daemon_msg "Display $VGL_DISPLAY is already in use by an other program."
        log_daemon_msg "Consider changing \$VGL_DISPLAY in $BUMBLEBEE_CONFDIR/bumblebee.conf"
        return 1
        ;;
    esac

    log_daemon_msg "Starting X..."

    LD_LIBRARY_PATH="$X_LD_LIBRARY_PATH:$LD_LIBRARY_PATH" \
        "$X_DAEMON" $X_DAEMON_ARGS $VGL_DISPLAY &

    # wait for at most three seconds before the server has started
    local retries=0
    # wait until the PIDFILE has become available (X is started)
    while [ ! -s "$PIDFILE" -a $retries -lt 6 ]; do
        ((retries++))
        sleep .5
    done

    # fail if the X server is not running
    if ! xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS"; then
        log_daemon_msg "The Bumblebee X server failed to start. Please check $X_LOGFILE"
        return 1
    fi

    log_daemon_msg "X has started."
    # Everything is OK, X has started
    return 0
}

# Stop the running X server
# Return values:
# 0 - the X server has gone (either it wasn't started or it was stopped)
# 1 - the X server refused to leave, perhaps a driver crash
stop_x() {
    local pid
    # is a X server running?
    pid=$(xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS")
    case $? in
      0) # It's our server, should stop it
        log_daemon_msg "X is running, initiating shutdown..."
        kill -TERM "$pid" 2>/dev/null

        # wait for at most five seconds to death
        local retries=0
        # wait until pid is no more
        while kill -0 "$pid" 2>/dev/null && [ $retries -lt 10 ]; do
            ((retries++))
            sleep .5
        done

        # check if still running, if it is KILL it
        if kill -0 "$pid" 2>/dev/null; then
            log_daemon_msg "X did not shutdown in time, sending KILL signal"
            kill -KILL "$pid" 2>/dev/null
        fi

        # still running? ow, perhaps a driver crash :?
        if kill -0 "$pid" >/dev/null; then
            log_daemon_msg "X could not be killed, perhaps the driver crashed?"
            return 1
        fi
        ;;
      1|2) # not started or invalid pidfile
        ;;
      3) # crashed, should do a cleanup?
        log_daemon_msg "X could not be stopped because it the driver has crashed."
        return 1
        ;;
      4) # Not our server, not our responsibility, don't care.
        ;;
    esac

    log_daemon_msg "X has been stopped."
    # Everything OK, We are gone!
    return 0
}

stop_daemon() {
    stop_x
    rm -f "$BUMBLEBEE_PIDFILE"
    rm -f "$BUMBLEBEE_FIFO"
}

start_daemon() {
    if (( EUID != 0 )); then
        echo "Must be run as root"
        return 1
    fi

    # race condition prevention; try to create a new pidfile
    if ! (set -o noclobber;echo $$ > "$BUMBLEBEE_PIDFILE"); then
        # file did already exist, make sure that another daemon isn't running

        # open $BUMBLEBEE_PIDFILE for reading
        exec 8< "$BUMBLEBEE_PIDFILE"

        # prevent other processes from writing
        if ! flock -x -w 2 8; then
            echo "Could not acquire a lock, another daemon is likely running"
            return 1
        fi

        # does the pidfile contain a program that is running?
        # XXX: use the binary path to check if bumblebee is running
        if kill -0 "$(<&8)" 2>/dev/null; then
            echo "A Bumblebee daemon is already running"
            return 1
        fi

        # invalid pid, just write our pid to it
        echo $$ > "$BUMBLEBEE_PIDFILE"
        # and close the fd
        exec 8>&-
    fi

    # cleanup on exit
    trap stop_daemon EXIT

    # ok, bye old fifo if any
    rm -f "$BUMBLEBEE_FIFO"

    # the group may write only
    if ! mkfifo --mode=620  "$BUMBLEBEE_FIFO"; then
        log_daemon_msg "Error: Cannot create fifo $BUMBLEBEE_FIFO for communication."
        return 1
    fi
    chgrp "$BUMBLEBEE_GROUP" "$BUMBLEBEE_FIFO"

    local command
    local pids
    while :; do
        # this is our "sleep" function, it waits for clients to give commands
        command=$(< "$BUMBLEBEE_FIFO")
        # space-separated list of optirun instances
        pids=$(pidof -x "${OPTIRUNS[@]}")

        if [[ ${command:0:5} == start ]]; then
            # only start if there are actually clients running
            if [ -n "$pids" ]; then
                start_x
            fi
        elif [[ $STOP_SERVICE_ON_EXIT == [Yy]* ]]; then
            # allow to quit X if there are no clients running or if the client
            # does not have child programs running. xlsclients did not work :(
            if [ -z "$pids" ] || ! ps --ppid "$pids" > /dev/null; then
                stop_x
            fi
        fi
    done
}

# Should print a message and exit status:
# 0 - running and X is running.
# 1 - daemon started X not available and can start normally
# 2 - daemon not present or can't find pidfile
# 3 - daemon started but can't start X server. Reboot required.
# Should be run as a normal user so it must be granted to read some files
status_daemon() {
    # Check for pid file available
    if [ ! -f "$BUMBLEBEE_PIDFILE" ]; then
        log_daemon_msg "No pidfile could be found. Bumblebee daemon is not running"
        return 2
    fi
    # Pidfile available but no bumblebee running, we screwed somewhere
    if ! pidof -x -o $$ "$(readlink -e "$0")" >/dev/null; then
        log_daemon_msg "No Instance of bumblebee is running. Please check $BUMBLEBEE_PIDFILE"
        return 2
    fi

    # Check for X server and return a useful value
    xserver_available "$PIDFILE" "$X_DAEMON" "$X_DAEMON_ARGS" >/dev/null
    case $? in
      0) # already started
        return 0
        ;;
      1|2) # not started, but can be started
        return 1
        ;;
      3) # driver crash
        log_daemon_msg "Xorg was previously crashed by the nvidia driver on display $VGL_DISPLAY."
        log_daemon_msg "Reboot the machine if you want to use Bumblebee"
        return 3
        ;;
      4) # another X is running, not ours
        log_daemon_msg "Display $VGL_DISPLAY is already in use by an other program."
        log_daemon_msg "Consider changing \$VGL_DISPLAY in $BUMBLEBEE_CONFDIR/bumblebee.conf"
        return 3
        ;;
    esac
}

# Show the versioning info and Project URL.
show_version_msg() {
    cat <<EOF
Bumblebee version ${BUMBLEBEE_VERSION}

Licenced under GNU GPL v3, "Beer-ware License" and "Red Bull License"
as published by Martin Juhl.

More info at: https://github.com/Bumblebee-Project/Bumblebee
EOF
}

# Show help message on usage and arguments.
show_help_msg() {
    show_version_msg

    cat <<EOF
Usage:
    bumblebee [OPTIONS]
    OPTIONS
        -d          start bumblebee service as daemon. To start it
                    backgrounded use the handler with 'start' argument.
        --help      show this help message
        --version   show version number
EOF
}

case "$1" in
  --version)
    show_version_msg
    ;;
  --help)
    show_help_msg
    ;;
  -d)
    start_daemon
    ;;
  --status)
    status_daemon
    ;;
  *)
    show_help_msg
    ;;
esac
