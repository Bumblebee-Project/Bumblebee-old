#!/bin/bash
# Copyright (C) 2011 Bumblebee Project
#
# This file is part of Bumblebee.
#
# Bumblebee is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bumblebee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bumblebee.  If not, see <http://www.gnu.org/licenses/>.

# XXX: protect against injection of shell meta characters
echo_variables() {
    echo "BINDIR='$BINDIR'"
    echo "SBINDIR='$SBINDIR'"
    echo "CONFDIR='$CONFDIR'"
    echo "LIBDIR='$LIBDIR'"
    echo "INITDIR='$INITDIR'"
    echo "BUILDDIR='$BUILDDIR'"
    echo "XORG_MODULEPATH='$XORG_MODULEPATH'"
    echo "NV_LIBPATH='$NV_LIBPATH'"
    echo "NV_LIB32PATH='$NV_LIB32PATH'"
    echo "DRIVERS='$DRIVERS'"
    echo "NVIDIABUSID='$NVIDIABUSID'"
}

# warning: do not use $, #, *, ?, [, ] or whitespace in paths
makefile_escape() {
    # if someone has a better idea, please post it on
    # http://stackoverflow.com/q/7654386/427545
    local str="$1"
    # important: $ is escaped with $$, not \$
    str="${str//$/$$}"
    str="${str//#/\\#}"
    echo "$str"
}

create_makefile_cfg() {
    cat > config.mk <<CFG
# autogenerated at $(date -R) by $0
BUMBLEBEE_VERSION := $(makefile_escape "$BUMBLEBEE_VERSION")

BINDIR      := $(makefile_escape "$BINDIR")
SBINDIR     := $(makefile_escape "$SBINDIR")
CONFDIR     := $(makefile_escape "$CONFDIR")
LIBDIR      := $(makefile_escape "$LIBDIR")
INITDIR     := $(makefile_escape "$INITDIR")
BUILDDIR    := $(makefile_escape "$BUILDDIR")
XORG_MODULEPATH := $(makefile_escape "$XORG_MODULEPATH")
NV_LIBPATH  := $(makefile_escape "$NV_LIBPATH")
NV_LIB32PATH    := $(makefile_escape "$NV_LIB32PATH")

DRIVERS     := $(makefile_escape "$DRIVERS")
NVIDIABUSID := $(makefile_escape "$NVIDIABUSID")
CFG
}

# Checks for the nvidia Xorg module to be present if nvidia driver is set,
# otherwhise will warn and throw an error.
validate_module_path() {
    local nvidiapresent=false
    for driver in "${DRIVERS[@]}"; do
        if [ "$driver" = "nvidia" ]; then
            nvidiapresent=true
        fi
    done
    if [ "$nvidiapresent" = "true" ]; then
        local path="$XORG_MODULEPATH/xorg/modules/drivers/nvidia_drv.so"
        if [ -f "$path" ]; then
            # is valid
            return 0
        else
            echo "$path does not exist."
            echo "Error: wrong path to the nvidia Xorg module"
            return 1
        fi
    else
        return 0
    fi
}

# Should check for sanity in the variables. If any isn't sane then should throw
# an error message and exit.
sanity_check() {

    # Check for NVIDIABUSID to be set, otherwhise warn about it, not fatal.
    if [ -z "$NVIDIABUSID" ]; then
        echo
        echo "Could not determine the PCI Bus ID of your Nvidia card."
        echo "You will need to set it manually in the configuration file"
    fi

    # Check for XORG_MODULEPATH to be set valid if the nvidia driver is set
    if ! validate_module_path ; then
        echo
        echo "XORG_MODULEPATH is not set and nvidia driver is enabled. Please set"
        echo "--xorg-module-path option to a valid value or disable nvidia driver"
        exit 1
    fi

    # Check for INITDIR to be valid
    if [ -z "$INITDIR" ]; then
        echo
        echo "Error: INITDIR can't be empty. Please set it to the directory where"
        echo "daemons are stored in your system (e.g. '/etc/init.d')"
        exit 1
    fi

    #echo "Sanity check is a stub, exiting"
    #return 1
}

# Create configuration files with current variables. ".configure" is a simple
# shellscript with 'variable=value' pairs. Furthermore, a "config.mk" file is
# created for 'make' to work. These files should only be created if the
# configuration step succeeded
create_conf_file() {
    echo_variables > '.configure'
    create_makefile_cfg
}

# Detect PCI Bus ID of the nVidia card
# -d 10de: shows devices from nvidia only
# 03 is the Display controller class
# 0300 is a VGA compatible controller
# 0302 is a 3D controller
# (information from /usr/share/misc/pci.ids and the manpage of lspci)
detect_busid(){
    NVIDIABUSID=$(lspci -d 10de: -n | grep '030[02]:' | cut -d' ' -f1 | tr . :)
}

# Help message with information on usage
show_help_msg() {
        cat <<EOF
Usage: $0 [options]

The options listed below control the variables to be set for the installer.

OPTIONS

  --driver=DRIVERS
  --driver DRIVERS
    DRIVERS is a comma-separated list of drivers to be installed. The last
    specified driver will be the default driver. Valid values are nvidia and
    nouveau; if not specified, nvidia and nouveau will be installed. NOTE you
    will need to set the '--xorg-module-path' variable for nvidia to work.

  --prefix=PREFIX
  --prefix PREFIX
    Install files under directory PREFIX. Defaults to '/usr/local'.

  --bindir=DIR
  --bindir DIR
    Install binary files to directory DIR. Defaults to 'PREFIX/bin'.

  --sbindir=DIR
  --sbindir DIR
    Install system binary files to directory DIR. Defaults to 'PREFIX/sbin'

  --libdir=DIR
  --libdir DIR
    Install library files to directory DIR. A subdirectory named 'bumblebee'
    will be created. Defaults to 'PREFIX/lib'.

  --confdir=DIR
  --confdir DIR
    Install configuration files to directory DIR. A subdirectory named
    'bumblebee' will be created. Defaults to 'PREFIX/etc'.

  --initdir=DIR
  --initdir DIR
    Install the handler file (used for starting/stopping the daemon) to
    directory DIR. This option is required.

  --build-dir=DIR
  --build-dir DIR
    Use DIR instead of '.build' for storing files built by the installer. DIR
    must exist to avoid accidentally overwriting directories. The entries
    DIR/stages and DIR/install-files are removed.

  --xorg-module-path=XORG_MODULEPATH
  --xorg-module-path XORG_MODULEPATH
    This variable tells the installer where to find the nvidia Xorg driver. Is
    needed only if nvidia driver is set.

  --nv-lib-path=NV_LIBPATH
  --nv-lib-path NV_LIBPATH
    This variable tells the installer where to find the nvidia libraries. Is
    needed only if nvidia driver is set.

  --nv-lib32-path=NV_LIBPATH
  --nv-lib32-path NV_LIBPATH
    This variable tells the installer where to find the nvidia 32-bit libraries
    in a 64-bit system. Is needed only if nvidia driver is set.

  --help
    Show this help message
EOF
}

# this directory is used for outputting installer files
BUILDDIR=.build

# Prefix of the installation. If SBINDIR, BINDIR, LIBDIR or CONFDIR are unset,
# a directory relative to this one will be used
PREFIX='/usr/local'

# Local install locations. If empty, use the defaults
BINDIR=
SBINDIR=
LIBDIR=
CONFDIR=

# Unset this variable, should be checked, if not found in a list of known ones,
# then warn about it and set it in the command line.
INITDIR=

# Variables for the nvidia binaries.
# Unset these variables, if 'nvidia' is set, should throw an error.
XORG_MODULEPATH=
NV_LIBPATH=
NV_LIB32PATH=

# If not set, the installation can continue but won't be funtional until the
# PCI bus ID of the Nvidia card is set. Warn about that.
NVIDIABUSID=

# available drivers
AVAILABLE_DRIVERS=('nvidia' 'nouveau')
# A list of drivers to be installed
DRIVERS=('nvidia' 'nouveau')
# the graphics driver to be used, defaults to the last driver in $DRIVERS
DRIVER=${DRIVERS[${#DRIVERS[@]}-1]}

# The version to be installed
# Try to determine the hash from the git repo
GIT_HASH="$(git rev-parse --short HEAD 2>/dev/null)"
# if not a git dir, try using the dirname (e.g. tarball)
if [ -z "$GIT_HASH" ] && [[ $PWD =~ -Bumblebee-[0-9a-f]{7}$ ]]; then
    GIT_HASH="${PWD##*-Bumblebee-}"
fi
# Perhaps exported by git archive? Requires export-subst be set for this file
if [ -z "$GIT_HASH" ]; then
    GIT_HASH='$Format:%h$'
    # If not substituted, clear it
    [ ${#GIT_HASH} -ne 7 ] && GIT_HASH=
fi
BUMBLEBEE_VERSION="$(cat VERSION)${GIT_HASH:+~git$GIT_HASH}"


# Try to automatically check needed variables, then override them with command
# line arguments.
detect_busid

# Big fat command line parser.
while [ $# -gt 0 ]; do
    case "$1" in
      --driver=*|--driver)
        if [[ $1 == --driver ]]; then
            shift
            arg_driver="$1"
        else
            arg_driver="${1#--driver=}"
        fi
        DRIVERS=()

        IFS=','
        parse_drivers=( ${arg_driver[*]} )
        # Restore input field separator
        IFS=$' \t\n'

        invalid_drivers=()
        # reverse loop since order matters: the final driver is the default one
        for ((i=${#parse_drivers[@]}-1; i>=0; i--)); do
            driver="${parse_drivers[i]}"
            for current_driver in "${DRIVERS[@]}"; do
                # skip duplicates
                [[ $current_driver == "$driver" ]] && continue 2
            done

            for avail_driver in "${AVAILABLE_DRIVERS[@]}"; do
                if [[ $avail_driver == "$driver" ]]; then
                    DRIVERS=("$driver" "${DRIVERS[@]}")
                    continue 2
                fi
            done

            invalid_drivers[${#invalid_drivers[@]}]="$driver"
        done

        if [ ${#invalid_drivers[@]} -gt 0 ]; then
            echo "Invalid drivers: ${invalid_drivers[*]}"
            echo "Try '$0 --help' for more information."
            exit 255
        fi

        if [ ${#DRIVERS[@]} -gt 0 ]; then
            # the last driver in the list is the default one
            DRIVER=${DRIVERS[${#DRIVERS[@]}-1]}
        else
            echo "No driver specified"
            echo "Try '$0 --help' for more information."
            exit 255
        fi
        ;;
      --xorg-module-path=*|--xorg-module-path)
        if [[ $1 == --xorg-module-path ]]; then
            shift
            XORG_MODULEPATH="$1"
        else
            XORG_MODULEPATH="${1#--xorg-module-path=}"
        fi
        ;;
      --nv-lib-path=*|--nv-lib-path)
        if [[ $1 == --nv-lib-path ]]; then
            shift
            NV_LIBPATH="$1"
        else
            NV_LIBPATH="${1#--nv-lib-path=}"
        fi
        ;;
      --nv-lib32-path=*|--nv-lib32-path)
        if [[ $1 == --nv-lib32-path ]]; then
            shift
            NV_LIB32PATH="$1"
        else
            NV_LIB32PATH="${1#--nv-lib32-path=}"
        fi
        ;;
      --prefix=*|--prefix)
        if [[ $1 == --prefix ]]; then
            shift
            PREFIX="$1"
        else
            PREFIX="${1#--prefix=}"
        fi
        ;;
      --bindir=*|--bindir)
        if [[ $1 == --bindir ]]; then
            shift
            BINDIR="$1"
        else
            BINDIR="${1#--bindir=}"
        fi
        ;;
      --sbindir=*|--sbindir)
        if [[ $1 == --sbindir ]]; then
            shift
            SBINDIR="$1"
        else
            SBINDIR="${1#--sbindir=}"
        fi
        ;;
      --libdir=*|--libdir)
        if [[ $1 == --libdir ]]; then
            shift
            LIBDIR="$1"
        else
            LIBDIR="${1#--libdir=}"
        fi
        ;;
      --confdir=*|--confdir)
        if [[ $1 == --confdir ]]; then
            shift
            CONFDIR="$1"
        else
            CONFDIR="${1#--confdir=}"
        fi
        ;;
      --initdir=*|--initdir)
        if [[ $1 == --initdir ]]; then
            shift
            INITDIR="$1"
        else
            INITDIR="${1#--initdir=}"
        fi
        ;;
      --build-dir=*|--build-dir)
        if [[ $1 == --build-dir ]]; then
            shift
            BUILDDIR="$1"
        else
            BUILDDIR="${1#--build-dir=}"
        fi
        if [ ! -d "$BUILDDIR" ]; then
            echo "The build directory '$BUILDDIR' must exist."
            exit 255
        fi
        ;;
      --help)
        show_help_msg
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "Unrecognized option '$1'"
        echo "Try '$0 --help' for more information."
        exit 255
        ;;
    esac
    shift
done

# if no directories have been set, use defaults
: "${BINDIR:=$PREFIX/bin}"
: "${SBINDIR:=$PREFIX/sbin}"
LIBDIR="${LIBDIR-$PREFIX/lib}/bumblebee"
CONFDIR="${CONFDIR-$PREFIX/etc}/bumblebee"

if ! sanity_check; then
    echo "Install can't be performed with current variables"
else
    echo "Set installation variables:"
    echo_variables
    create_conf_file
fi
