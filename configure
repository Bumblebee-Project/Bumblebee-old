#!/bin/bash
# Copyright (C) 2011 Bumblebee Project
#
# This file is part of Bumblebee.
#
# Bumblebee is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Bumblebee is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Bumblebee.  If not, see <http://www.gnu.org/licenses/>.

echo_variables() {
    echo "BINDIR='$BINDIR'"
    echo "SBINDIR='$SBINDIR'"
    echo "CONFDIR='$CONFDIR'"
    echo "LIBDIR='$LIBDIR'"
    echo "INITDIR='$INITDIR'"
    echo "NVIDIABUSID='$NVIDIABUSID'"
    echo "BUILDDIR='$BUILDDIR'"
    echo "PREFIX='$PREFIX'"
}

# Checks for the nvidia Xorg module to be present if nvidia driver is set,
# otherwhise will warn and throw an error.
validate_module_path() {
    local nvidiapresent=false
    for driver in "${DRIVERS[@]}"; do
        if [ "$driver" = "nvidia" ]; then
            nvidiapresent=true
        fi
    done
    if [ "$nvidiapresent" = "true" ]; then
        local path="$XORG_MODULEPATH/xorg/modules/drivers/nvidia_drv.so"
        if [ -f "$path" ]; then
            # is valid
            return 0
        else
            echo "$path does not exist."
            echo "Error: wrong path to the nvidia Xorg module"
            return 1
        fi
    else
        return 0
    fi
}

# Should check for sanity in the variables. If any isn't sane then should throw
# an error message and exit.
sanity_check() {

    # Check for NVIDIABUSID to be set, otherwhise warn about it, not fatal.
    if [ -z "$NVIDIABUSID" ]; then
        echo
        echo "Could not determine the PCI Bus ID of your Nvidia card."
        echo "You will need to set it manually in the configuration file"
    fi

    # Check for XORG_MODULEPATH to be set valid if the nvidia driver is set
    if ! validate_module_path ; then
        echo
        echo "XORG_MODULEPATH is not set and nvidia driver is enabled. Please set"
        echo "--xorg-module-path option to a valid value or disable nvidia driver"
        exit 1
    fi

    # Check for INITDIR to be valid
    if [ -z "$INITD" ]; then
        echo
        echo "Error: INITDIR can't be empty. Please set it to the directory where"
        echo "daemons are stored in your system (e.g. '/etc/init.d')"
        exit 1
    fi

    #echo "Sanity check is a stub, exiting"
    #return 1
}

# Create configuration file with current variables. Is a simple bash file with
# 'variable = value' pairs. Should only be created if the script succeeded
create_conf_file() {
    echo_variables > '.configure'
}

# Detect PCI Bus ID of the nVidia card
# -d 10de: shows devices from nvidia only
# 03 is the Display controller class
# 0300 is a VGA compatible controller
# 0302 is a 3D controller
# (information from /usr/share/misc/pci.ids and the manpage of lspci)
detect_busid(){
    NVIDIABUSID=$(lspci -d 10de: -n | grep '030[02]:' | cut -d' ' -f1 | tr . :)
}

# Help message with information on usage (XXX:HIGHLY OUTDATED)
show_help_msg() {
        cat <<EOF
Usage: $0 [options]

The options listed below control the vaiables to set to the installer. All paths
has the form of: PREFIX/USRDIR/*DIR* for installation paths. INITDIR and CONFDIR
are relative to PREFIX directly. INITDIR is where the daemon handler is to be
installed. The CONFDIR is where bumblebee's system configuration is to be
installed. Please note: both CONFDIR and LIBDIR add the prefix '/bumblebee', you
don't need to add it yourself, this means that '--libdir=lib' will result in
'lib/bumblebee' and '--confdir=etc' will result on 'etc/bumblebee'. Both paths
relative to PREFIX.

OPTIONS

  --driver=DRIVERS
  --driver DRIVERS
    DRIVERS is a comma-separated list of drivers to be installed. The last
    specified driver will be the default driver. Valid values are nvidia and
    nouveau; if not specified, nvidia and nouveau will be installed. NOTE you
    will need to set the '--xorg-module-path' variable for nvidia to work.

  --usrdir=USRDIR
  --usrdir USRDIR
    Set the user directory to install bumblebee. This is relative to the PREFIX
    variable. Defaults to 'usr/local'.

  --bindir=BINDIR
  --bindir BINDIR
    Install binary files to this directory. This variable is relative to USRDIR
    variable. Defaults to 'bin'.

  --sbindir=SBINDIR
  --sbindir SBINDIR
    Install system binary files to this directory. This variable is relative to
    USRDIR variable. Defaults to 'sbin'

  --libdir=DIR
  --libdir DIR
    Install library files to this directory. This variable is relative to USRDIR
    variable and it adds '/bumblebee' suffix. Defaults to 'lib'.

  --confdir=DIR
  --confdir DIR
    Install configuration files to this directory. This variable is relative to
    PREFIX variable and it adds '/bumblebee' suffix. Defaults to 'etc'.

  --initdir=DIR
  --initdir DIR
    Install handler file to this directory. This variable should be set,
    otherwhise, the script will fail.

  --prefix=PREFIX
  --prefix PREFIX
    Use PREFIX as root folder instead. Useful for chroot installations. Set it
    to "/" if you do not want to use a different root directory. The contents of
    this directory are not cleared before use. If empty, will default to "/".

  --build-dir=PATH
  --build-dir PATH
    Use PATH instead of '.build' for storing files built by the installer. PATH
    must exist to avoid accidentally overwritting directories. The entries
    PATH/stages and PATH/install-files are removed.

  --xorg-module-path=XORG_MODULEPATH
  --xorg-module-path XORG_MODULEPATH
    This variable tells the installer where to find the nvidia Xorg driver. Is
    needed only if nvidia driver is set.

  --help
    Show this help message
EOF
}

# this directory is used for outputting installer files
BUILDDIR=.build

# Prefix of the installation. All directories should be relative tho this one
PREFIX=
USRDIR="/usr/local"

# Local install locations, to make this system-wide they should be overriden by
# prefix command line arguments.
BIND="/bin"
SBIND="/sbin"
LIBD="/lib"
CONFD="/etc"

# Unset this variable, should be checked, if not found in a list of known ones,
# then warn about it and set it in the command line.
INITD=

# Unset this variable, if 'nvidia' is set, this should throw an error
XORG_MODULEPATH=

# If not set, the installation can continue but won't be funtional until the
# PCI bus ID of the Nvidia card is set. Warn about that.
NVIDIABUSID=

# available drivers
AVAILABLE_DRIVERS=('nvidia' 'nouveau')
# A list of drivers to be installed
DRIVERS=('nvidia' 'nouveau')
# the graphics driver to be used, defaults to the last driver in $DRIVERS
DRIVER=${DRIVERS[${#DRIVERS[@]}-1]}

# The version to be installed
# Try to determine the hash from the git repo
GIT_HASH="$(git rev-parse --short HEAD 2>/dev/null)"
# if not a git dir, try using the dirname (e.g. tarball)
if [ -z "$GIT_HASH" ] && [[ $PWD =~ -Bumblebee-[0-9a-f]{7}$ ]]; then
    GIT_HASH="${PWD##*-Bumblebee-}"
fi
# Perhaps exported by git archive? Requires export-subst be set for this file
if [ -z "$GIT_HASH" ]; then
    GIT_HASH='$Format:%h$'
    # If not substituted, clear it
    [ ${#GIT_HASH} -ne 7 ] && GIT_HASH=
fi
BUMBLEBEE_VERSION="$(cat VERSION)${GIT_HASH:+~git$GIT_HASH}"


# Try to automatically check needed variables, then override them with command
# line arguments.
detect_busid

# Big fat command line parser.
while [ $# -gt 0 ]; do
    case "$1" in
      --driver=*|--driver)
        if [[ $1 == --driver ]]; then
            shift
            arg_driver="$1"
        else
            arg_driver="${1#--driver=}"
        fi
        DRIVERS=()

        IFS=','
        parse_drivers=( ${arg_driver[*]} )
        # Restore input field separator
        IFS=$' \t\n'

        invalid_drivers=()
        # reverse loop since order matters: the final driver is the default one
        for ((i=${#parse_drivers[@]}-1; i>=0; i--)); do
            driver="${parse_drivers[i]}"
            for current_driver in "${DRIVERS[@]}"; do
                # skip duplicates
                [[ $current_driver == "$driver" ]] && continue 2
            done

            for avail_driver in "${AVAILABLE_DRIVERS[@]}"; do
                if [[ $avail_driver == "$driver" ]]; then
                    DRIVERS=("$driver" "${DRIVERS[@]}")
                    continue 2
                fi
            done

            invalid_drivers[${#invalid_drivers[@]}]="$driver"
        done

        if [ ${#invalid_drivers[@]} -gt 0 ]; then
            echo "Invalid drivers: ${invalid_drivers[*]}"
            echo "Try '$0 --help' for more information."
            exit 255
        fi

        if [ ${#DRIVERS[@]} -gt 0 ]; then
            # the last driver in the list is the default one
            DRIVER=${DRIVERS[${#DRIVERS[@]}-1]}
        else
            echo "No driver specified"
            echo "Try '$0 --help' for more information."
            exit 255
        fi
        ;;
      --xorg-module-path=*|--xorg-module-path)
        if [[ $1 == --xorg-module-path ]]; then
            shift
            XORG_MODULEPATH="$1"
        else
            XORG_MODULEPATH="${1#--xorg-module-path=}"
        fi
        ;;
      --prefix=*|--prefix)
        if [[ $1 == --prefix ]]; then
            shift
            PREFIX="$1"
        else
            PREFIX="${1#--prefix=}"
        fi
        ;;
      --usrdir=*|--usrdir)
        if [[ $1 == --usrdir ]]; then
            shift
            USRDIR="$1"
        else
            USRDIR="${1#--usrdir=}"
        fi
        ;;
      --bindir=*|--bindir)
        if [[ $1 == --bindir ]]; then
            shift
            BIND="$1"
        else
            BIND="${1#--bindir=}"
        fi
        ;;
      --sbindir=*|--sbindir)
        if [[ $1 == --sbindir ]]; then
            shift
            SBIND="$1"
        else
            SBIND="${1#--sbindir=}"
        fi
        ;;
      --libdir=*|--libdir)
        if [[ $1 == --libdir ]]; then
            shift
            LIBD="$1"
        else
            LIBD="${1#--libdir=}"
        fi
        ;;
      --confdir=*|--confdir)
        if [[ $1 == --confdir ]]; then
            shift
            CONFD="$1"
        else
            CONFD="${1#--confdir=}"
        fi
        ;;
      --initdir=*|--initdir)
        if [[ $1 == --initdir ]]; then
            shift
            INITD="$1"
        else
            INITD="${1#--initdir=}"
        fi
        ;;
      --build-dir=*|--build-dir)
        if [[ $1 == --build-dir ]]; then
            shift
            BUILDDIR="$1"
        else
            BUILDDIR="${1#--build-dir=}"
        fi
        if [ ! -d "$BUILDDIR" ]; then
            echo "The build directory '$BUILDDIR' must exist."
            exit 255
        fi
        ;;
      --help)
        show_help_msg
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "Unrecognized option '$1'"
        echo "Try '$0 --help' for more information."
        exit 255
        ;;
    esac
    shift
done

BINDIR="$USRDIR/$BIND"
SBINDIR="$USRDIR/$SBIND"
LIBDIR="$USRDIR/$LIBD/bumblebee"
CONFDIR="$CONFD/bumblebee"
INITDIR="$INITD"

if ! sanity_check; then
    echo "Install can't be performed with current variables"
else
    echo "Set installation variables:"
    echo_variables
    create_conf_file
fi
