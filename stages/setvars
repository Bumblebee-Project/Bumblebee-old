#!/bin/bash
# Determine whether it is a 32-bit (i686) or 64-bit (x86_64) machine
ARCH=$(uname -m)
MODPROBE=$(which modprobe)
LSPCI=$(which lspci)

IS_64=false
[[ $ARCH == x86_64 ]] && IS_64=true

UNATTENDED=false

# These stages will not be executed by the installer
SKIP_STAGES=

# this directory is used for outputting installer files
BUILDDIR=.build

# installation output directory, useful for chroot builds
DESTDIR=

# Install locations
BINDIR=/usr/local/bin
SBINDIR=/usr/local/sbin
CONFDIR=/etc/bumblebee
LIBDIR=/usr/local/lib/bumblebee
INITDIR=/etc/init.d
NVIDIA_LIB32DIR=/usr/lib/nvidia-current
NVIDIA_LIB64DIR=/usr/lib/nvidia-current
XORG_MODULEPATH=/usr/lib/xorg/modules

# available drivers, add nouveau in the future
AVAILABLE_DRIVERS=('nvidia')
# the graphics driver to be loaded, defaults to nvidia
DRIVER=nvidia
#for driver in nvidia-current nvidia; do
#    if "${MODPROBE}" --dry-run --quiet $driver; then
#        DRIVER=$driver
#        break
#    fi
#done

ANCIENTINSTALLATIONFOUND=false
# Bumblebee 1.7.10 (MrMEEE/bumblebee) or 2.2.0 (ppa:mj-casalogic/bumblebee)
# and before abused /etc/bumblebee for storing the version. In current versions
# (Bumblebee-Project/Bumblebee), this is a directory for configuration files
[ -f /etc/bumblebee ] && ANCIENTINSTALLATIONFOUND=true

while [ $# -gt 0 ]; do
    case "$1" in
      --unattended)
        UNATTENDED=true
        ;;
      --driver=*|--driver)
        if [[ $1 == --driver ]]; then
            shift
            arg_driver="$1"
        else
            arg_driver="${1#--driver=}"
        fi
        DRIVER=
        for driver in "${AVAILABLE_DRIVERS[@]}"; do
            if [[ $driver == "$arg_driver" ]]; then
                DRIVER="$driver"
                break
            fi
        done
        if [ -z "$DRIVER" ]; then
            echo "Unrecognized driver: $arg_driver"
            exit 255
        fi
        ;;
      --dest-dir=*|--dest-dir)
        if [[ $1 == --dest-dir ]]; then
            shift
            DESTDIR="$1"
        else
            DESTDIR="${1#--dest-dir=}"
        fi
        # Empty values are allowed which means "do not use a different root"
        if [ -n "$DESTDIR" -a ! -d "$DESTDIR" ]; then
            echo "The destination directory '$DESTDIR' must exist."
            exit 255
        fi
        ;;
      --build-dir=*|--build-dir)
        if [[ $1 == --build-dir ]]; then
            shift
            BUILDDIR="$1"
        else
            BUILDDIR="${1#--build-dir=}"
        fi
        if [ ! -d "$BUILDDIR" ]; then
            echo "The build directory '$BUILDDIR' must exist."
            exit 255
        fi
        ;;
      --skip-stages=*|--skip-stages)
        if [[ $1 == --skip-stages ]]; then
            shift
            SKIP_STAGES="$1"
        else
            SKIP_STAGES="${1##--skip-stages=}"
        fi

        # strip out duplicates and put in an array
        IFS=$'\n'
        SKIP_STAGES=( $(tr ',' '\n' <<<"$SKIP_STAGES" | sort -u) )
        # Restore input field separator
        IFS=$' \t\n'

        invalid_stages=()
        for stage in "${SKIP_STAGES[@]}"; do
            if [ ! -f "stages/$stage" ]; then
                invalid_stages[${#invalid_stages[@]}]="$stage"
            fi
        done

        if [ ${#invalid_stages[@]} -gt 0 ]; then
            echo "Invalid stages: ${invalid_stages[*]}"
            echo "Try '$0 --help' for more information."
            exit 255
        fi
        ;;
      --help)
        echo "Usage: $0 [options]"
        echo
        echo "  --unattended"
        echo "    Do not pause with informational messages, proceed with the installation"
        echo "    without confirming"
        echo
        echo "  --driver=DRIVER"
        echo "  --driver DRIVER"
        echo "    Use DRIVER as graphics driver. Currently, the only valid driver is nvidia."
        echo "    If not specified, nvidia is assumed"
        echo
        echo "  --dest-dir=DESTDIR"
        echo "  --dest-dir DESTDIR"
        echo "    Use DESTDIR as root folder instead. Useful for chroot installations. Set it"
        echo "    to an empty value if you do not want to use a different root directory. The"
        echo "    contents of this directory are not cleared before use."
        echo
        echo "  --build-dir=PATH"
        echo "  --build-dir PATH"
        echo "    Use PATH instead of '.build' for storing files built by the installer. PATH"
        echo "    must exist to avoid accidentally overwritting directories. The entries"
        echo "    PATH/stages and PATH/install-files are removed."
        echo
        echo "  --skip-stages=stage1,stage2,...,stageN"
        echo "  --skip-stages stage1,stage2,...,stageN"
        echo "    Warning: this is an expert option, only use it if you know what you are"
        echo "    doing! This option accepts a comma-separated list of stages to be disabled."
        echo "    A stage is a file in the stages/ directory at the root of the installer."
        echo "    Examples: ubuntu/setvars,welcome,fedora/dependencies"
        echo "    When using this option repeatedly, the previous list is cleared."
        echo
        echo "  --help"
        echo "    Show this help message"
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "Unrecognized option '$1'"
        echo "Try '$0 --help' for more information."
        exit 255
        ;;
    esac
    shift
done

# files installed by the installer, useful for uninstalling
INSTALLED_FILES=()
INSTALLED_DIRS=()

# Creates a directory on the target system
install_dir() {
    local mode=$1
    local target="$2"
    install -d -m$mode "$DESTDIR$target"
    INSTALLED_DIRS[${#INSTALLED_DIRS[@]}]="$target"
}

# Copies a file to the target system, using a configured file if needed. This
# configured file can be created in stages/build
install_file() {
    local mode=$1
    local source="$2"
    local target="$3"
    local prefix="$BUILDDIR/install-files"
    [ ! -f "$prefix/$source" ] && prefix=install-files
    if [ -f "$prefix/$source" ]; then
        install -D -m$mode "$prefix/$source" "$DESTDIR$target"
        INSTALLED_FILES[${#INSTALLED_FILES[@]}]="$target"
    else
        echo "'$source' did not exist, ignoring"
    fi
}
