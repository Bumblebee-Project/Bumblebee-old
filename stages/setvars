#!/bin/bash
# Determine whether it is a 32-bit (i686) or 64-bit (x86_64) machine
ARCH=$(uname -m)
LSPCI=$(which lspci)

IS_64=false
[[ $ARCH == x86_64 ]] && IS_64=true

UNATTENDED=false

# A space-separated list of installer types to be used. If empty, all installer
# stages are used
INCLUDE_GROUPS=
# These stages will not be executed by the installer
SKIP_STAGES=

# this directory is used for outputting installer files
BUILDDIR=.build

# installation output directory, useful for chroot builds
DESTDIR=

# Install locations
BINDIR=/usr/local/bin
SBINDIR=/usr/local/sbin
CONFDIR=/etc/bumblebee
LIBDIR=/usr/local/lib/bumblebee
INITDIR=/etc/init.d
XORG_MODULEPATH=/usr/lib/xorg/modules

# available drivers, add nouveau in the future
AVAILABLE_DRIVERS=('nvidia')
# the graphics driver to be used, defaults to nvidia
DRIVER=nvidia

# The version to be installed
BUMBLEBEE_VERSION="$(cat VERSION)"

while [ $# -gt 0 ]; do
    case "$1" in
      --unattended)
        UNATTENDED=true
        ;;
      --driver=*|--driver)
        if [[ $1 == --driver ]]; then
            shift
            arg_driver="$1"
        else
            arg_driver="${1#--driver=}"
        fi
        DRIVER=
        for driver in "${AVAILABLE_DRIVERS[@]}"; do
            if [[ $driver == "$arg_driver" ]]; then
                DRIVER="$driver"
                break
            fi
        done
        if [ -z "$DRIVER" ]; then
            echo "Unrecognized driver: $arg_driver"
            exit 255
        fi
        ;;
      --dest-dir=*|--dest-dir)
        if [[ $1 == --dest-dir ]]; then
            shift
            DESTDIR="$1"
        else
            DESTDIR="${1#--dest-dir=}"
        fi
        # Empty values are allowed which means "do not use a different root"
        if [ -n "$DESTDIR" -a ! -d "$DESTDIR" ]; then
            echo "The destination directory '$DESTDIR' must exist."
            exit 255
        fi
        ;;
      --build-dir=*|--build-dir)
        if [[ $1 == --build-dir ]]; then
            shift
            BUILDDIR="$1"
        else
            BUILDDIR="${1#--build-dir=}"
        fi
        if [ ! -d "$BUILDDIR" ]; then
            echo "The build directory '$BUILDDIR' must exist."
            exit 255
        fi
        ;;
      --actions=*|--actions)
        if [[ $1 == --actions ]]; then
            shift
            INCLUDE_GROUPS="$1"
        else
            INCLUDE_GROUPS="${1##--actions=}"
        fi

        # strip out duplicates and put in an array
        IFS=$'\n'
        INCLUDE_GROUPS=( $(tr ',' '\n' <<<"$INCLUDE_GROUPS" | sort -u) )
        # Restore input field separator
        IFS=$' \t\n'

        invalid_actions=()
        for action in "${INCLUDE_GROUPS[@]}"; do
            case "$action" in
              precheck|build|install|installuninst|postconfig) ;;
              *) invalid_actions[${#invalid_actions[@]}]="$action" ;;
            esac
        done

        if [ ${#invalid_actions[@]} -gt 0 ]; then
            echo "Invalid installer actions: ${invalid_actions[*]}"
            echo "Try '$0 --help' for more information."
            exit 255
        fi
        ;;
      --skip-stages=*|--skip-stages)
        if [[ $1 == --skip-stages ]]; then
            shift
            SKIP_STAGES="$1"
        else
            SKIP_STAGES="${1##--skip-stages=}"
        fi

        # strip out duplicates and put in an array
        IFS=$'\n'
        SKIP_STAGES=( $(tr ',' '\n' <<<"$SKIP_STAGES" | sort -u) )
        # Restore input field separator
        IFS=$' \t\n'

        invalid_stages=()
        for stage in "${SKIP_STAGES[@]}"; do
            if [ ! -f "stages/$stage" ]; then
                invalid_stages[${#invalid_stages[@]}]="$stage"
            fi
        done

        if [ ${#invalid_stages[@]} -gt 0 ]; then
            echo "Invalid stages: ${invalid_stages[*]}"
            echo "Try '$0 --help' for more information."
            exit 255
        fi
        ;;
      --help)
        cat <<EOF
Usage: $0 [options]

  --unattended
    Do not pause with informational messages, proceed with the installation
    without confirming

  --driver=DRIVER
  --driver DRIVER
    Use DRIVER as graphics driver. Currently, the only valid driver is nvidia.
    If not specified, nvidia is assumed

  --dest-dir=DESTDIR
  --dest-dir DESTDIR
    Use DESTDIR as root folder instead. Useful for chroot installations. Set it
    to an empty value if you do not want to use a different root directory. The
    contents of this directory are not cleared before use.

  --build-dir=PATH
  --build-dir PATH
    Use PATH instead of '.build' for storing files built by the installer. PATH
    must exist to avoid accidentally overwritting directories. The entries
    PATH/stages and PATH/install-files are removed.

  --actions=ACTIONS
  --actions ACTIONS
    Restrict the installer to run a predefined set of stages. ACTIONS is a comma-
    separated list of installer types, valid values are:
      precheck - check if the installer can be run (dependencies)
      build - Generate files to be installed
      install - Copy files
      installuninst - Generate and install uninstaller
      postconfig - Configure the X server, installs services, blacklists drivers
    Note that build, install and postconfig must be run in the stated order.
    installuninst can only be run after install.
    Disabling stages using --skip-stages takes precedence over --actions

  --skip-stages=stage1,stage2,...,stageN
  --skip-stages stage1,stage2,...,stageN
    Warning: this is an expert option, only use it if you know what you are
    doing! This option accepts a comma-separated list of stages to be disabled.
    A stage is a file in the stages/ directory at the root of the installer.
    Examples: ubuntu/setvars,welcome,fedora/dependencies
    When using this option repeatedly, the previous list is cleared.

  --help
    Show this help message
EOF
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "Unrecognized option '$1'"
        echo "Try '$0 --help' for more information."
        exit 255
        ;;
    esac
    shift
done

# Commands (for now, used in uninstaller)
CMD_SVC_STOP="$INITDIR/bumblebee stop"
CMD_SVC_REMOVE=

# files installed by the installer, useful for uninstalling
INSTALLED_FILES=()
INSTALLED_DIRS=()

# Creates a directory on the target system
install_dir() {
    local mode=$1
    local target="$2"
    install -d -m$mode "$DESTDIR$target"
    INSTALLED_DIRS[${#INSTALLED_DIRS[@]}]="$target"
}

# Copies a file to the target system, using a configured file if needed. This
# configured file can be created in stages/build
install_file() {
    local mode=$1
    local source="$2"
    local target="$3"
    local prefix="$BUILDDIR/install-files"
    [ ! -f "$prefix/$source" ] && prefix=install-files
    if [ -f "$prefix/$source" ]; then
        install -D -m$mode "$prefix/$source" "$DESTDIR$target"
        INSTALLED_FILES[${#INSTALLED_FILES[@]}]="$target"
    else
        echo "'$source' did not exist, ignoring"
    fi
}
